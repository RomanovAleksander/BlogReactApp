{"version":3,"sources":["api/config.js","api/api.js","actions/postForm/actions.js","actions/postForm/types.js","components/PostListItem/PostListItem.js","components/ErrorIndicator/ErrorIndicator.js","components/PostList/PostList.js","actions/posts/actions.js","actions/posts/types.js","pages/PostsPage.js","components/PostComments/PostComments.js","actions/comments/actions.js","actions/comments/types.js","components/Post/Post.js","actions/post/actions.js","actions/post/types.js","pages/PostPage.js","components/NotFound/NotFound.js","pages/NotFoundPage.js","components/PostForm/PostForm.js","components/App/App.js","components/ErrorBoundry/ErrorBoundry.js","reducers/posts.js","reducers/post.js","reducers/postForm.js","reducers/index.js","store.js","index.js"],"names":["ROOT_URL","errObj","url","status","message","option","fetch","res","ok","this","json","fetchData","headers","body","method","JSON","stringify","openForm","post","type","payload","Wrapper","styled","div","Button","PostListItem","onView","title","onClick","Error","ErrorIndicator","Li","li","button","PostList","posts","map","key","id","PostListContainer","onCreate","props","postsRequested","postsLoaded","postsError","ApiService","get","then","data","catch","err","loading","error","React","Component","mapDispatchToProps","newPosts","connect","state","withRouter","history","postId","push","PostComments","onBodyChange","e","setState","target","value","onSubmit","preventDefault","commentSuccess","console","log","default","comments","htmlFor","placeholder","minLength","onChange","required","comment","Header","Post","onDelete","postError","delete","onUpdate","postRequested","postLoaded","newPost","PostPage","NotF","NotFound","NotFoundPage","isOpen","Form","form","Footer","PostForm","onTitleChange","handleClose","closeFrom","createPostSuccess","createPostError","update","createdPost","postForm","from","to","exact","path","component","PostsPage","match","params","ErrorBoundry","hasError","children","initialState","reducer","combineReducers","action","store","createStore","composeWithDevTools","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.584737ea.chunk.js","sourcesContent":["export const ROOT_URL = 'https://bloggy-api.herokuapp.com';\r\n","import { ROOT_URL } from './config';\r\n\r\nclass ApiService {\r\n  errObj = (url, status) => {\r\n    return {\r\n      message: `Invalid request: ${url}, status ${status}`,\r\n      status: status\r\n    };\r\n  };\r\n\r\n  async fetchData(url, option) {\r\n    const res = await fetch(`${ROOT_URL}${url}`, option);\r\n    if (!res.ok) {\r\n      throw this.errObj(`${ROOT_URL}${url}`, res.status);\r\n    }\r\n    return res.json();\r\n  }\r\n\r\n  async get(url) {\r\n    return this.fetchData(url, {\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n  }\r\n\r\n  async post(url, body) {\r\n    return this.fetchData(url, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(body)\r\n    });\r\n  }\r\n\r\n  async update(url, body) {\r\n    return this.fetchData(url, {\r\n      method: 'PUT',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(body)\r\n    });\r\n  }\r\n\r\n  async delete(url) {\r\n    return this.fetchData(url, {\r\n      method: 'DEL',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default new ApiService();\r\n","import {\r\n  FORM_HAS_OPENED,\r\n  FORM_HAS_CLOSED\r\n} from './types';\r\n\r\nconst openForm = (post) => {\r\n  return {\r\n    type: FORM_HAS_OPENED,\r\n    payload: post\r\n  }\r\n};\r\n\r\nconst closeFrom = () => {\r\n  return {\r\n    type: FORM_HAS_CLOSED\r\n  }\r\n};\r\n\r\nexport {\r\n  openForm,\r\n  closeFrom\r\n};\r\n","export const FORM_HAS_OPENED = 'FORM_HAS_OPENED';\r\nexport const FORM_HAS_CLOSED = 'FORM_HAS_CLOSED';\r\n","import React from 'react';\r\nimport styled from \"styled-components\";\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n`;\r\n\r\nconst Button = styled.div`\r\n  display: inline-block;\r\n  margin-left: 10px;\r\n  padding: 2px 3px 2px 3px;\r\n  max-height: 22px;\r\n  text-align: center;\r\n  vertical-align: middle;\r\n  border-radius: 5px;\r\n  background-color: darkgrey;\r\n  cursor: pointer;\r\n`;\r\n\r\nexport const PostListItem = ({ post, onView }) => {\r\n  const { title } = post;\r\n  return (\r\n    <Wrapper>\r\n      <div>{title}</div>\r\n      <Button onClick={onView}>\r\n        View\r\n      </Button>\r\n    </Wrapper>\r\n  )\r\n};\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Error = styled.div`\r\n  text-align: center;\r\n`;\r\n\r\nexport const ErrorIndicator = () => {\r\n  return (\r\n    <Error>\r\n      Ops... Something went wrong\r\n    </Error>\r\n  )\r\n};\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport ApiService from '../../api/api';\r\nimport { postsRequested, postsLoaded, postsError } from '../../actions/posts/actions';\r\nimport { openForm } from '../../actions/postForm/actions';\r\nimport { PostListItem } from '../PostListItem';\r\nimport { ErrorIndicator } from '../ErrorIndicator';\r\nimport styled from \"styled-components\";\r\n\r\nconst Li = styled.li`\r\n  list-style: none;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  margin-left: 40px;\r\n  margin-top: 5px;\r\n  width: 70px;\r\n`;\r\n\r\nconst PostList = ({ posts, onView }) => {\r\n  return (\r\n    <ul>\r\n      {\r\n        posts.map((post) => {\r\n          return (\r\n            <Li key={post.id}>\r\n              <PostListItem\r\n                post={post}\r\n                onView={() => onView(post.id)} />\r\n            </Li>\r\n          )\r\n        })\r\n      }\r\n    </ul>\r\n  )\r\n};\r\n\r\nclass PostListContainer extends React.Component {\r\n  componentDidMount() {\r\n    const { postsRequested, postsLoaded, postsError } = this.props;\r\n\r\n    postsRequested();\r\n    ApiService.get('/posts')\r\n      .then((data) => postsLoaded(data))\r\n      .catch((err) => {\r\n        postsError(err)\r\n      })\r\n  }\r\n\r\n  onCreate = () => {\r\n    const { openForm } = this.props;\r\n\r\n    openForm();\r\n  };\r\n\r\n  render() {\r\n    const { posts, loading, onView, error } = this.props;\r\n\r\n    if (loading) {\r\n      return <div>Loading...</div>\r\n    }\r\n\r\n    if (error) {\r\n      return <ErrorIndicator />\r\n    }\r\n\r\n    if (posts) {\r\n      return (\r\n        <>\r\n        <Button onClick={this.onCreate}>Create</Button>\r\n        <PostList onView={onView} posts={posts} />\r\n        </>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    posts: state.posts.posts,\r\n    loading: state.posts.loading,\r\n    error: state.posts.error\r\n  }\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  postsLoaded,\r\n  postsRequested,\r\n  postsError,\r\n  openForm\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(PostListContainer);\r\n","import {\r\n  FETCH_POSTS_REQUEST,\r\n  FETCH_POSTS_SUCCESS,\r\n  FETCH_POSTS_FAILURE,\r\n  FETCH_CREATE_POST_SUCCESS,\r\n  FETCH_CREATE_POST_FAILURE\r\n} from './types';\r\n\r\nconst postsRequested = () => {\r\n  return {\r\n    type: FETCH_POSTS_REQUEST\r\n  }\r\n};\r\n\r\nconst postsLoaded = (newPosts) => {\r\n  return {\r\n    type: FETCH_POSTS_SUCCESS,\r\n    payload: newPosts\r\n  }\r\n};\r\n\r\nconst postsError = (error) => {\r\n  return {\r\n    type: FETCH_POSTS_FAILURE,\r\n    payload: error\r\n  }\r\n};\r\n\r\nconst createPostSuccess = (createdPost) => {\r\n  return {\r\n    type: FETCH_CREATE_POST_SUCCESS,\r\n    payload: createdPost\r\n  }\r\n};\r\n\r\nconst createPostError = (error) => {\r\n  return {\r\n    type: FETCH_CREATE_POST_FAILURE,\r\n    payload: error\r\n  }\r\n};\r\n\r\nexport {\r\n  postsRequested,\r\n  postsLoaded,\r\n  postsError,\r\n  createPostSuccess,\r\n  createPostError\r\n};\r\n","export const FETCH_POSTS_REQUEST = 'FETCH_POSTS_REQUEST';\r\nexport const FETCH_POSTS_SUCCESS = 'FETCH_POSTS_SUCCESS';\r\nexport const FETCH_POSTS_FAILURE = 'FETCH_POSTS_FAILURE';\r\n\r\nexport const FETCH_CREATE_POST_SUCCESS = 'FETCH_CREATE_POST_SUCCESS';\r\nexport const FETCH_CREATE_POST_FAILURE = 'FETCH_CREATE_POST_FAILURE';\r\n","import React from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { PostList } from '../components/PostList';\r\n\r\nconst PostsPage = ({history}) => {\r\n  return (\r\n    <PostList onView={(postId) => {\r\n      history.push(`/posts/${postId}`);\r\n    }}/>\r\n\r\n  );\r\n};\r\n\r\nexport default withRouter(PostsPage);","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport { commentSuccess } from '../../actions/comments/actions';\r\nimport ApiService from '../../api/api';\r\n\r\nclass PostComments extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.default = {\r\n      postId: \"\",\r\n      body: \"\"\r\n    };\r\n    this.state = this.default;\r\n  }\r\n\r\n  onBodyChange = (e) => {\r\n    this.setState({\r\n      postId: this.props.postId,\r\n      body: e.target.value\r\n    });\r\n  };\r\n\r\n  onSubmit = (e) => {\r\n    e.preventDefault();\r\n    const { commentSuccess } = this.props;\r\n\r\n    ApiService.post('/comments', {...this.state})\r\n      .then((data) => {\r\n        commentSuccess(data)\r\n      })\r\n      .catch((err) => {\r\n        console.log(err)\r\n      });\r\n  };\r\n\r\n  render() {\r\n    const { comments } = this.props;\r\n    const { body } = this.state;\r\n\r\n    return (\r\n      <>\r\n        <form onSubmit={this.onSubmit}>\r\n          <label htmlFor=\"commentBody\">Create comment: </label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"body\"\r\n            id=\"commentBody\"\r\n            minLength={1}\r\n            onChange={this.onBodyChange}\r\n            value={body}\r\n            required\r\n          />\r\n          <button type=\"submit\">\r\n            Create\r\n          </button>\r\n        </form>\r\n        <ol>\r\n          <b>Comments:</b>\r\n          {\r\n            comments.map((comment) => {\r\n              return (\r\n                <li key={comment.id}>\r\n                  <div>{comment.body}</div>\r\n                </li>\r\n              )\r\n            })\r\n          }\r\n        </ol>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  commentSuccess\r\n};\r\n\r\nexport default connect(\r\n  null,\r\n  mapDispatchToProps\r\n)(PostComments);\r\n","import {\r\n  COMMENT_SUCCESS\r\n} from './types';\r\n\r\nconst commentSuccess = (comment) => {\r\n  return {\r\n    type: COMMENT_SUCCESS,\r\n    payload: comment\r\n  }\r\n};\r\n\r\nexport {\r\n  commentSuccess\r\n};\r\n","export const COMMENT_SUCCESS = 'COMMENT_SUCCESS';\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport ApiService from '../../api/api';\r\nimport { postRequested, postLoaded, postError } from '../../actions/post/actions';\r\nimport { openForm } from '../../actions/postForm/actions';\r\nimport { ErrorIndicator } from '../ErrorIndicator';\r\nimport { PostComments } from '../PostComments';\r\nimport styled from \"styled-components\";\r\n\r\nconst Header = styled.div`\r\n  display: flex;\r\n`;\r\n\r\nclass Post extends React.Component {\r\n  componentDidMount() {\r\n    const { postRequested, postLoaded, postError, postId } = this.props;\r\n\r\n    postRequested();\r\n    ApiService.get(`/posts/${postId}?_embed=comments`)\r\n      .then((data) => {\r\n        postLoaded(data);\r\n      })\r\n      .catch((err) => {\r\n        postError(err);\r\n      })\r\n  }\r\n\r\n  onDelete = () => {\r\n    const { postId, postError } = this.props;\r\n\r\n    ApiService.delete(`/posts/${postId}`)\r\n      .catch((err) => {\r\n        postError(err);\r\n      })\r\n  };\r\n\r\n  onUpdate = () => {\r\n    const { openForm, post } = this.props;\r\n\r\n    openForm(post);\r\n  };\r\n\r\n  render() {\r\n    const { post, loading, error } = this.props;\r\n\r\n    if (loading) {\r\n      return <div>Loading...</div>\r\n    }\r\n\r\n    if (error) {\r\n      return <ErrorIndicator />\r\n    }\r\n\r\n    if (post) {\r\n      const { title, body, comments } = post;\r\n\r\n      return (\r\n        <>\r\n          <Header>\r\n            <div><b>{title}</b></div>\r\n            <button onClick={this.onUpdate}>Update</button>\r\n            <button onClick={this.onDelete}>Delete</button>\r\n          </Header>\r\n          <div>{body}</div>\r\n          <PostComments comments={comments}\r\n                        postId={post.id} />\r\n        </>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    post: state.post.post,\r\n    loading: state.post.loading,\r\n    error: state.post.error\r\n  }\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  postRequested,\r\n  postLoaded,\r\n  postError,\r\n  openForm\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Post);\r\n","import {\r\n  FETCH_POST_REQUEST,\r\n  FETCH_POST_SUCCESS,\r\n  FETCH_POST_FAILURE,\r\n  FETCH_UPDATE_SUCCESS,\r\n  FETCH_UPDATE_FAILURE\r\n} from './types';\r\n\r\nconst postRequested = () => {\r\n  return {\r\n    type: FETCH_POST_REQUEST\r\n  }\r\n};\r\n\r\nconst postLoaded = (newPost) => {\r\n  return {\r\n    type: FETCH_POST_SUCCESS,\r\n    payload: newPost\r\n  }\r\n};\r\n\r\nconst postError = (error) => {\r\n  return {\r\n    type: FETCH_POST_FAILURE,\r\n    payload: error\r\n  }\r\n};\r\n\r\nconst updateSuccess = (newPost) => {\r\n  return {\r\n    type: FETCH_UPDATE_SUCCESS,\r\n    payload: newPost\r\n  }\r\n};\r\n\r\nconst updateError = (error) => {\r\n  return {\r\n    type: FETCH_UPDATE_FAILURE,\r\n    payload: error\r\n  }\r\n};\r\n\r\nexport {\r\n  postRequested,\r\n  postLoaded,\r\n  postError,\r\n  updateSuccess,\r\n  updateError\r\n};\r\n","export const FETCH_POST_REQUEST = 'FETCH_POST_REQUEST';\r\nexport const FETCH_POST_SUCCESS = 'FETCH_POST_SUCCESS';\r\nexport const FETCH_POST_FAILURE = 'FETCH_POST_FAILURE';\r\nexport const FETCH_UPDATE_SUCCESS = 'FETCH_UPDATE_SUCCESS';\r\nexport const FETCH_UPDATE_FAILURE = 'FETCH_UPDATE_FAILURE';\r\n","import React from 'react';\r\nimport { Post } from '../components/Post';\r\n\r\nexport const PostPage = ({ postId }) => {\r\n  return (\r\n    <Post postId={postId}/>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst NotF = styled.div`\r\n  text-align: center;\r\n`;\r\n\r\nexport const NotFound = () => {\r\n  return (\r\n    <NotF>\r\n      Not Found\r\n    </NotF>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { NotFound } from '../components/NotFound';\r\n\r\nexport const NotFoundPage = () => {\r\n  return (\r\n    <NotFound />\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { createPostSuccess, createPostError } from '../../actions/posts/actions';\r\nimport { closeFrom } from '../../actions/postForm/actions';\r\nimport ApiService from '../../api/api';\r\nimport styled from 'styled-components';\r\n\r\nconst Wrapper = styled.div`\r\n  position: absolute;\r\n  display: ${props => props.isOpen ? 'flex' : 'none'};\r\n  justify-content: center;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: rgba(246,246,246,0.8);\r\n  z-index: 1; \r\n`;\r\n\r\nconst Form = styled.form`\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: column;\r\n  top: 20%;\r\n`;\r\n\r\nconst Footer = styled.div`\r\n  display: flex;\r\n  justify-content: space-between\r\n`;\r\n\r\nexport class PostForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.default = {\r\n      title: \"\",\r\n      body: \"\"\r\n    };\r\n    this.state = props.post || this.default;\r\n  }\r\n\r\n  onTitleChange = (e) => {\r\n    this.setState({\r\n      title: e.target.value\r\n    });\r\n  };\r\n\r\n  onBodyChange = (e) => {\r\n    this.setState({\r\n      body: e.target.value\r\n    });\r\n  };\r\n\r\n  handleClose = () => {\r\n    const { closeFrom } = this.props;\r\n    closeFrom();\r\n  };\r\n\r\n  onSubmit = (e) => {\r\n    e.preventDefault();\r\n    const { createPostSuccess, createPostError } = this.props;\r\n\r\n    if (this.props.post) {\r\n      ApiService.update(`/posts/${this.state.id}`, { ...this.state })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    } else {\r\n      ApiService.post('/posts', { ...this.state })\r\n        .then((data) => {\r\n          createPostSuccess(data)\r\n        })\r\n        .catch((err) => {\r\n          createPostError(err)\r\n        });\r\n    }\r\n\r\n    this.setState({ ...this.default });\r\n    this.handleClose();\r\n  };\r\n\r\n  render() {\r\n    const { title, body } = this.state;\r\n\r\n    return (\r\n      <Wrapper isOpen>\r\n        <Form onSubmit={this.onSubmit}>\r\n          <label htmlFor=\"title\">Title:</label>\r\n          <input\r\n            required=\"\"\r\n            id=\"title\"\r\n            type=\"text\"\r\n            onChange={this.onTitleChange}\r\n            placeholder=\"title\"\r\n            value={title}\r\n          />\r\n          <label htmlFor=\"body\">Body:</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"body\"\r\n            id=\"body\"\r\n            onChange={this.onBodyChange}\r\n            value={body}\r\n          />\r\n          <Footer>\r\n            <button type=\"button\" onClick={this.handleClose}>\r\n              Close\r\n            </button>\r\n            <button type=\"submit\">\r\n              Create\r\n            </button>\r\n          </Footer>\r\n        </Form>\r\n      </Wrapper>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    isOpen: state.postForm.isOpen,\r\n    post: state.postForm.post\r\n  }\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  createPostSuccess,\r\n  createPostError,\r\n  closeFrom\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(PostForm);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Route, Switch, Redirect } from 'react-router-dom';\r\nimport { PostsPage, PostPage, NotFoundPage } from '../../pages';\r\nimport { PostForm } from '../PostForm';\r\nimport styled from 'styled-components';\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  max-width: 900px;\r\n  margin: 0 auto;  \r\n`;\r\n\r\nconst App = (props) => {\r\n  return (\r\n    <Wrapper>\r\n      {props.isOpen && (<PostForm />)}\r\n      <Switch>\r\n        <Redirect from=\"/\" to=\"/posts\" exact />\r\n        <Route path=\"/posts\" component={PostsPage} exact />\r\n        <Route path=\"/posts/:id\"\r\n                      component={({ match }) => {\r\n                        const {id} = match.params;\r\n\r\n                        return <PostPage postId={id} />\r\n                      }}\r\n        />\r\n        <Route component={NotFoundPage} />\r\n      </Switch>\r\n    </Wrapper>\r\n  )\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    isOpen: state.postForm.isOpen\r\n  }\r\n};\r\n\r\nexport default connect(mapStateToProps)(App);\r\n","import React from 'react';\r\nimport { ErrorIndicator } from '../ErrorIndicator';\r\n\r\nexport class ErrorBoundry extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      hasError: false\r\n    }\r\n  }\r\n\r\n  componentDidCatch() {\r\n    this.setState({ hasError: true })\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <ErrorIndicator />\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n","import {\r\n  FETCH_POSTS_REQUEST,\r\n  FETCH_POSTS_SUCCESS,\r\n  FETCH_POSTS_FAILURE,\r\n  FETCH_CREATE_POST_SUCCESS,\r\n  FETCH_CREATE_POST_FAILURE\r\n} from '../actions/posts/types';\r\n\r\nconst initialState = {\r\n  posts: [],\r\n  loading: true,\r\n  error: null\r\n};\r\n\r\nexport const posts = (state = initialState, action) => {\r\n  const { type, payload } = action;\r\n  switch (type) {\r\n    case FETCH_POSTS_REQUEST:\r\n      return {\r\n        ...state,\r\n        posts: [],\r\n        loading: true,\r\n        error: null\r\n      };\r\n    case FETCH_POSTS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        posts: payload,\r\n        loading: false,\r\n        error: null\r\n      };\r\n    case FETCH_POSTS_FAILURE:\r\n      return {\r\n        ...state,\r\n        posts: [],\r\n        loading: false,\r\n        error: payload\r\n      };\r\n    case FETCH_CREATE_POST_SUCCESS:\r\n      return {\r\n        ...state,\r\n        posts: [\r\n          ...state.posts,\r\n          payload\r\n        ]\r\n      };\r\n    case FETCH_CREATE_POST_FAILURE:\r\n      return state;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import {\r\n  FETCH_POST_REQUEST,\r\n  FETCH_POST_SUCCESS,\r\n  FETCH_POST_FAILURE,\r\n  FETCH_UPDATE_SUCCESS,\r\n  FETCH_UPDATE_FAILURE\r\n} from '../actions/post/types';\r\nimport {\r\n  COMMENT_SUCCESS\r\n} from '../actions/comments/types';\r\n\r\nconst initialState = {\r\n  post: {},\r\n  loading: true,\r\n  error: null\r\n};\r\n\r\nexport const post = (state = initialState, action) => {\r\n  const { type, payload } = action;\r\n  switch (type) {\r\n    case FETCH_POST_REQUEST:\r\n      return {\r\n        ...state,\r\n        post: {},\r\n        loading: true,\r\n        error: null\r\n      };\r\n    case FETCH_POST_SUCCESS:\r\n      return {\r\n        ...state,\r\n        post: payload,\r\n        loading: false,\r\n        error: null\r\n      };\r\n    case FETCH_POST_FAILURE:\r\n      return {\r\n        ...state,\r\n        post: {},\r\n        loading: false,\r\n        error: payload\r\n      };\r\n    case FETCH_UPDATE_SUCCESS:\r\n      return {\r\n        ...state,\r\n        post: payload,\r\n      };\r\n    case FETCH_UPDATE_FAILURE:\r\n      return {\r\n        ...state,\r\n        error: payload\r\n      };\r\n    case COMMENT_SUCCESS:\r\n      return {\r\n        ...state,\r\n        post: {\r\n          ...state.post,\r\n          comments: [\r\n            ...state.post.comments,\r\n            payload\r\n          ]\r\n        },\r\n        loading: false,\r\n        error: null\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import {\r\n  FORM_HAS_OPENED,\r\n  FORM_HAS_CLOSED,\r\n} from '../actions/postForm/types';\r\n\r\nconst initialState = {\r\n  post: {},\r\n  isOpen: false\r\n};\r\n\r\nexport const postForm = (state = initialState, action) => {\r\n  const { type, payload } = action;\r\n  switch (type) {\r\n    case FORM_HAS_OPENED:\r\n      return {\r\n        post: payload,\r\n        isOpen: true\r\n      };\r\n    case FORM_HAS_CLOSED:\r\n      return {\r\n        ...initialState\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport { posts } from './posts';\r\nimport { post } from './post';\r\nimport { postForm } from './postForm';\r\n\r\nexport const reducer = combineReducers({\r\n  posts,\r\n  post,\r\n  postForm\r\n});\r\n","import { createStore } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { reducer } from './reducers';\r\n\r\nexport const store = createStore(\r\n  reducer,\r\n  composeWithDevTools()\r\n);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport './styles/style.css';\r\n\r\nimport { App } from './components/App';\r\nimport { ErrorBoundry } from './components/ErrorBoundry';\r\nimport { store } from './store';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <ErrorBoundry>\r\n      <HashRouter>\r\n        <App />\r\n      </HashRouter>\r\n    </ErrorBoundry>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}